import{_ as e,o,c as t,Q as a}from"./chunks/framework.397d0407.js";const S=JSON.parse('{"title":"前端WebSocket详解","description":"","frontmatter":{},"headers":[],"relativePath":"guide/others/WebSocket详解-.md","filePath":"guide/others/WebSocket详解-.md"}'),s={name:"guide/others/WebSocket详解-.md"},c=a('<h1 id="前端websocket详解" tabindex="-1">前端WebSocket详解 <a class="header-anchor" href="#前端websocket详解" aria-label="Permalink to &quot;前端WebSocket详解&quot;">​</a></h1><h2 id="websocket简介" tabindex="-1">WebSocket简介 <a class="header-anchor" href="#websocket简介" aria-label="Permalink to &quot;WebSocket简介&quot;">​</a></h2><p>websocket是H5才开始提供的一种在单个TCP连接上进行全双工通讯的协议。主要作用就是建立服务器和客户端的长连接能更好的节省服务器资源和带宽，服务器向浏览器推流实现实时通信。</p><p>和http一样，WebSocket也是应用层协议。浏览器和服务器只要完成一次握手的动作，然后浏览器和服务器之间就会脱离http协议，而是用WebSocket自己的ws协议。客户端和服务器端就可以通过tcp连接直接交换数据。</p><h2 id="创建一个websocket对象" tabindex="-1">创建一个WebSocket对象 <a class="header-anchor" href="#创建一个websocket对象" aria-label="Permalink to &quot;创建一个WebSocket对象&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">var</span><span style="color:#E1E4E8;"> Socket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">WebSocket</span><span style="color:#E1E4E8;">(url,[protocol])</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">var</span><span style="color:#24292E;"> Socket </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">WebSocket</span><span style="color:#24292E;">(url,[protocol])</span></span></code></pre></div><p>以上代码中的第一个参数 url, 指定连接的 URL。第二个参数 protocol 是可选的，指定了可接受的子协议.</p><h2 id="websocket都有哪些属性" tabindex="-1">WebSocket都有哪些属性 <a class="header-anchor" href="#websocket都有哪些属性" aria-label="Permalink to &quot;WebSocket都有哪些属性&quot;">​</a></h2><p>Socket.readyState：这是个只读属性，y用来表示连接状态</p><p>0：未连接 1：连接已建立 2.连接z正在关闭 3.连接已关闭或打不开连接</p><p>Socket.bufferedAmount：z也是只读属性。主要是计算还没有被send()发出的UTF-8文本字节数。</p><h2 id="websocket方法" tabindex="-1">WebSocket方法 <a class="header-anchor" href="#websocket方法" aria-label="Permalink to &quot;WebSocket方法&quot;">​</a></h2><p>Socket.send()：向服务器发送数据</p><p>Socket.close()：关闭连接</p><h2 id="websocket事件" tabindex="-1">WebSocket事件 <a class="header-anchor" href="#websocket事件" aria-label="Permalink to &quot;WebSocket事件&quot;">​</a></h2><p>Socket.onopen:连接建立时触发</p><p>Socke.onmessage：客户端接受服务端数据时触发</p><p>Socket.onerror:通信错误时触发</p><p>Socket.onclose：连接关闭时触发</p><h2 id="websocket实例" tabindex="-1">WebSocket实例 <a class="header-anchor" href="#websocket实例" aria-label="Permalink to &quot;WebSocket实例&quot;">​</a></h2><p>WebSocket 协议本质上是一个基于 TCP 的协议。 为了建立一个 WebSocket 连接，客户端浏览器首先要向服务器发起一个 HTTP 请求，这个请求和通常的 HTTP 请求不同，包含了一些附加头信息，其中附加头信息&quot;Upgrade: WebSocket&quot;表明这是一个申请协议升级的 HTTP 请求，服务器端解析这些附加的头信息然后产生应答信息返回给客户端，客户端和服务器端的 WebSocket。连接就建立起来了，双方就可以通过这个连接通道自由的传递信息，并且这个连接会持续存在直到客户端或者服务器端的某一方主动的关闭连接。</p>',21),n=[c];function p(r,l,k,b,i,d){return o(),t("div",null,n)}const u=e(s,[["render",p]]);export{S as __pageData,u as default};
