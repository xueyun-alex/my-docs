import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.397d0407.js";const l="/my-docs/assets/ajax1.3ee7d9ee.png",x=JSON.parse('{"title":"ajax完整代码、axios安装与封装、api统一管理与页面调用","description":"","frontmatter":{},"headers":[],"relativePath":"guide/others/ajax.md","filePath":"guide/others/ajax.md"}'),o={name:"guide/others/ajax.md"},e=p('<h1 id="ajax完整代码、axios安装与封装、api统一管理与页面调用" tabindex="-1">ajax完整代码、axios安装与封装、api统一管理与页面调用 <a class="header-anchor" href="#ajax完整代码、axios安装与封装、api统一管理与页面调用" aria-label="Permalink to &quot;ajax完整代码、axios安装与封装、api统一管理与页面调用&quot;">​</a></h1><h2 id="ajax网络请求基础" tabindex="-1">Ajax网络请求基础 <a class="header-anchor" href="#ajax网络请求基础" aria-label="Permalink to &quot;Ajax网络请求基础&quot;">​</a></h2><p>​ ajax：不刷新页面懒加载（只加载用户需要的）数据|与服务端通信</p><p>xml：可自定义标签、存储以及传输数据使用，现在已被json格式取代</p><p>html：固定标签，渲染数据</p><p><strong>优点</strong></p><p>与服务器通讯，只加载需要的内容，速度很快</p><p>可根据事件（鼠标、键盘等事件）控制与服务器通讯加载内容</p><p><strong>缺点</strong></p><p>seo差 爬虫爬不到这些服务器加载过来的数据</p><p>跨域问题： a.com 不能向 b.com 发送请求</p><p>没有浏览器回退事件 也没有浏览记录</p><p>浏览器F12 调试台 network <img src="'+l+`" alt="这是图片" title="Magic Gardens"></p><h2 id="完整的ajax请求" tabindex="-1">完整的ajax请求 <a class="header-anchor" href="#完整的ajax请求" aria-label="Permalink to &quot;完整的ajax请求&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ajaxHttpRequestFunc</span><span style="color:#E1E4E8;">(){</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> xmlHttpRequest;  </span><span style="color:#6A737D;">// 创建XMLHttpRequest对象，即一个用于保存异步调用对象的变量</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(window.ActiveXObject){ </span><span style="color:#6A737D;">// IE浏览器的创建方式</span></span>
<span class="line"><span style="color:#E1E4E8;">            xmlHttpRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">ActiveXObject</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;Microsoft.XMLHTTP&quot;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(window.XMLHttpRequest){ </span><span style="color:#6A737D;">// Netscape浏览器中的创建方式</span></span>
<span class="line"><span style="color:#E1E4E8;">            xmlHttpRequest </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">XMLHttpRequest</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        xmlHttpRequest.</span><span style="color:#B392F0;">onreadystatechange</span><span style="color:#F97583;">=function</span><span style="color:#E1E4E8;">(){ </span><span style="color:#6A737D;">// 设置响应http请求状态变化的事件</span></span>
<span class="line"><span style="color:#E1E4E8;">            console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;请求过程&#39;</span><span style="color:#E1E4E8;">, xmlHttpRequest.readyState);</span></span>
<span class="line"><span style="color:#E1E4E8;">            </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(xmlHttpRequest.readyState </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">){ </span><span style="color:#6A737D;">// 判断异步调用是否成功,若成功开始局部更新数据</span></span>
<span class="line"><span style="color:#E1E4E8;">                console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;状态码为&#39;</span><span style="color:#E1E4E8;">, xmlHttpRequest.status);</span></span>
<span class="line"><span style="color:#E1E4E8;">                </span><span style="color:#F97583;">if</span><span style="color:#E1E4E8;">(xmlHttpRequest.status </span><span style="color:#F97583;">==</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">                    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;异步调用返回的数据为：&#39;</span><span style="color:#E1E4E8;">, xmlHttpRequest .responseText);</span><span style="color:#6A737D;">// 打印获取到的数据</span></span>
<span class="line"><span style="color:#E1E4E8;">          </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">res</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(xmlHttpRequest .responseText) </span><span style="color:#6A737D;">//JSON格式转换</span></span>
<span class="line"><span style="color:#E1E4E8;">          console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;JSON.parse(xmlHttpRequest .responseText)&#39;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">JSON</span><span style="color:#E1E4E8;">.</span><span style="color:#B392F0;">parse</span><span style="color:#E1E4E8;">(xmlHttpRequest .responseText));</span></span>
<span class="line"><span style="color:#E1E4E8;">          mes.value </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> res.result.note</span></span>
<span class="line"><span style="color:#E1E4E8;">                } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> { </span><span style="color:#6A737D;">// 如果异步调用未成功,弹出警告框,并显示错误状态码</span></span>
<span class="line"><span style="color:#E1E4E8;">                    </span><span style="color:#B392F0;">alert</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;error:HTTP状态码为:&quot;</span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;">xmlHttpRequest.status);</span></span>
<span class="line"><span style="color:#E1E4E8;">                }</span></span>
<span class="line"><span style="color:#E1E4E8;">            }</span></span>
<span class="line"><span style="color:#E1E4E8;">        }</span></span>
<span class="line"><span style="color:#E1E4E8;">        xmlHttpRequest.</span><span style="color:#B392F0;">open</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&quot;GET&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#9ECBFF;">&quot;请求的完整地址&quot;</span><span style="color:#E1E4E8;">,</span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 创建http请求，并指定请求得方法（get）、url（https://api.oioweb.cn/api/common/OneDayEnglish）以及验证信息</span></span>
<span class="line"><span style="color:#E1E4E8;">        xmlHttpRequest.</span><span style="color:#B392F0;">send</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">); </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ajaxHttpRequestFunc</span><span style="color:#24292E;">(){</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">let</span><span style="color:#24292E;"> xmlHttpRequest;  </span><span style="color:#6A737D;">// 创建XMLHttpRequest对象，即一个用于保存异步调用对象的变量</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(window.ActiveXObject){ </span><span style="color:#6A737D;">// IE浏览器的创建方式</span></span>
<span class="line"><span style="color:#24292E;">            xmlHttpRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">ActiveXObject</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;Microsoft.XMLHTTP&quot;</span><span style="color:#24292E;">);</span></span>
<span class="line"><span style="color:#24292E;">        }</span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(window.XMLHttpRequest){ </span><span style="color:#6A737D;">// Netscape浏览器中的创建方式</span></span>
<span class="line"><span style="color:#24292E;">            xmlHttpRequest </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">XMLHttpRequest</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        xmlHttpRequest.</span><span style="color:#6F42C1;">onreadystatechange</span><span style="color:#D73A49;">=function</span><span style="color:#24292E;">(){ </span><span style="color:#6A737D;">// 设置响应http请求状态变化的事件</span></span>
<span class="line"><span style="color:#24292E;">            console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;请求过程&#39;</span><span style="color:#24292E;">, xmlHttpRequest.readyState);</span></span>
<span class="line"><span style="color:#24292E;">            </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(xmlHttpRequest.readyState </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">){ </span><span style="color:#6A737D;">// 判断异步调用是否成功,若成功开始局部更新数据</span></span>
<span class="line"><span style="color:#24292E;">                console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;状态码为&#39;</span><span style="color:#24292E;">, xmlHttpRequest.status);</span></span>
<span class="line"><span style="color:#24292E;">                </span><span style="color:#D73A49;">if</span><span style="color:#24292E;">(xmlHttpRequest.status </span><span style="color:#D73A49;">==</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">200</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">                    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;异步调用返回的数据为：&#39;</span><span style="color:#24292E;">, xmlHttpRequest .responseText);</span><span style="color:#6A737D;">// 打印获取到的数据</span></span>
<span class="line"><span style="color:#24292E;">          </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">res</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(xmlHttpRequest .responseText) </span><span style="color:#6A737D;">//JSON格式转换</span></span>
<span class="line"><span style="color:#24292E;">          console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;JSON.parse(xmlHttpRequest .responseText)&#39;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">JSON</span><span style="color:#24292E;">.</span><span style="color:#6F42C1;">parse</span><span style="color:#24292E;">(xmlHttpRequest .responseText));</span></span>
<span class="line"><span style="color:#24292E;">          mes.value </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> res.result.note</span></span>
<span class="line"><span style="color:#24292E;">                } </span><span style="color:#D73A49;">else</span><span style="color:#24292E;"> { </span><span style="color:#6A737D;">// 如果异步调用未成功,弹出警告框,并显示错误状态码</span></span>
<span class="line"><span style="color:#24292E;">                    </span><span style="color:#6F42C1;">alert</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;error:HTTP状态码为:&quot;</span><span style="color:#D73A49;">+</span><span style="color:#24292E;">xmlHttpRequest.status);</span></span>
<span class="line"><span style="color:#24292E;">                }</span></span>
<span class="line"><span style="color:#24292E;">            }</span></span>
<span class="line"><span style="color:#24292E;">        }</span></span>
<span class="line"><span style="color:#24292E;">        xmlHttpRequest.</span><span style="color:#6F42C1;">open</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&quot;GET&quot;</span><span style="color:#24292E;">,</span><span style="color:#032F62;">&quot;请求的完整地址&quot;</span><span style="color:#24292E;">,</span><span style="color:#005CC5;">true</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 创建http请求，并指定请求得方法（get）、url（https://api.oioweb.cn/api/common/OneDayEnglish）以及验证信息</span></span>
<span class="line"><span style="color:#24292E;">        xmlHttpRequest.</span><span style="color:#6F42C1;">send</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">); </span><span style="color:#6A737D;">// 发送请求</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span></code></pre></div><h2 id="axios安装" tabindex="-1">axios安装 <a class="header-anchor" href="#axios安装" aria-label="Permalink to &quot;axios安装&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">npm install axios</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">npm install axios</span></span></code></pre></div><h2 id="axios封装" tabindex="-1">axios封装 <a class="header-anchor" href="#axios封装" aria-label="Permalink to &quot;axios封装&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// api/requests.js</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> axios </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;axios&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">//1.利用axios对象的方法create,去创建一个axios实例</span></span>
<span class="line"><span style="color:#6A737D;">//2.request1就是axios,只不过稍微配置一下</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">request1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> axios.</span><span style="color:#B392F0;">create</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//配置对象</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//基础路径，发请求的时候，路径当中会出现api，不用你手写</span></span>
<span class="line"><span style="color:#E1E4E8;">    baseURL:</span><span style="color:#9ECBFF;">&#39;https://api.oioweb.cn/api&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//请求时间超过5秒</span></span>
<span class="line"><span style="color:#E1E4E8;">    timeout:</span><span style="color:#79B8FF;">5000</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// api/requests.js</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> axios </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;axios&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">//1.利用axios对象的方法create,去创建一个axios实例</span></span>
<span class="line"><span style="color:#6A737D;">//2.request1就是axios,只不过稍微配置一下</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">request1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> axios.</span><span style="color:#6F42C1;">create</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//配置对象</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//基础路径，发请求的时候，路径当中会出现api，不用你手写</span></span>
<span class="line"><span style="color:#24292E;">    baseURL:</span><span style="color:#032F62;">&#39;https://api.oioweb.cn/api&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//请求时间超过5秒</span></span>
<span class="line"><span style="color:#24292E;">    timeout:</span><span style="color:#005CC5;">5000</span></span>
<span class="line"><span style="color:#24292E;">});</span></span></code></pre></div><h2 id="api统一管理" tabindex="-1">api统一管理 <a class="header-anchor" href="#api统一管理" aria-label="Permalink to &quot;api统一管理&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// api/index.js</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> request1 </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./requests&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#6A737D;">//导入刚才写好的axios二次封装的requests</span></span>
<span class="line"><span style="color:#E1E4E8;"> </span></span>
<span class="line"><span style="color:#6A737D;">//发请求：axios发请求返回结果promise对象</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getOneDayEnglish</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#6A737D;">//由于前面配置了基础路径，所以不用加/api</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#F97583;">return</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">requests</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        url: </span><span style="color:#9ECBFF;">&#39;/common/OneDayEnglish&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        method: </span><span style="color:#9ECBFF;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#E1E4E8;">    })</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// api/index.js</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> request1 </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./requests&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#6A737D;">//导入刚才写好的axios二次封装的requests</span></span>
<span class="line"><span style="color:#24292E;"> </span></span>
<span class="line"><span style="color:#6A737D;">//发请求：axios发请求返回结果promise对象</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getOneDayEnglish</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#6A737D;">//由于前面配置了基础路径，所以不用加/api</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#D73A49;">return</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">requests</span><span style="color:#24292E;">({</span></span>
<span class="line"><span style="color:#24292E;">        url: </span><span style="color:#032F62;">&#39;/common/OneDayEnglish&#39;</span><span style="color:#24292E;">,</span></span>
<span class="line"><span style="color:#24292E;">        method: </span><span style="color:#032F62;">&#39;get&#39;</span></span>
<span class="line"><span style="color:#24292E;">    })</span></span>
<span class="line"><span style="color:#24292E;">};</span></span></code></pre></div><h2 id="组件调取接口" tabindex="-1">组件调取接口 <a class="header-anchor" href="#组件调取接口" aria-label="Permalink to &quot;组件调取接口&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> {getOneDayEnglish} </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;../api/index.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 导入刚统一管理导出的api函数</span></span>
<span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">getEnglish</span><span style="color:#E1E4E8;"> (){</span></span>
<span class="line"><span style="color:#6A737D;">// promise对象 用then获取调取接口的返回值</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#B392F0;">getOneDayEnglish</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">then</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;response&#39;</span><span style="color:#E1E4E8;">,response);</span></span>
<span class="line"><span style="color:#E1E4E8;">      })</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> {getOneDayEnglish} </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;../api/index.js&#39;</span></span>
<span class="line"><span style="color:#6A737D;">// 导入刚统一管理导出的api函数</span></span>
<span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">getEnglish</span><span style="color:#24292E;"> (){</span></span>
<span class="line"><span style="color:#6A737D;">// promise对象 用then获取调取接口的返回值</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#6F42C1;">getOneDayEnglish</span><span style="color:#24292E;">().</span><span style="color:#6F42C1;">then</span><span style="color:#24292E;">(</span><span style="color:#E36209;">response</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">    console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;response&#39;</span><span style="color:#24292E;">,response);</span></span>
<span class="line"><span style="color:#24292E;">      })</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div>`,23),t=[e];function c(r,E,y,i,u,F){return a(),n("div",null,t)}const h=s(o,[["render",c]]);export{x as __pageData,h as default};
